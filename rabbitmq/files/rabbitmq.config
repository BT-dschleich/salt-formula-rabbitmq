{%- from "rabbitmq/map.jinja" import server with context -%}
[
    {rabbit, [{vm_memory_high_watermark, {{ server.memory.vm_high_watermark }}},
              {memory_alarms, true},
              {disk_free_limit, {{ server.disk_free_limit }}},
              {%- if pillar.rabbitmq.cluster is defined %}
              {%- from "rabbitmq/map.jinja" import cluster with context %}
              {cluster_partition_handling, autoheal},
              {tcp_listen_options,
                        [binary,
                          {packet, raw},
                          {reuseaddr, true},
                          {backlog, 128},
                          {nodelay, true},
                          {exit_on_close, false},
                          {keepalive, true}
                         ]
              },
              {cluster_nodes, {[{% for node in cluster.members %}'rabbit@{{ node.name }}'{% if not loop.last %}, {% endif %}{% endfor %}], {{ cluster.mode }}}},
              {%- endif %}
              {loopback_users, []},
              {tcp_listeners, [{"{{ server.bind.address }}",{{ server.bind.port }}}]}
              {%- if server.ssl is defined %},
              {ssl_listeners, [5671]},
              {ssl_options, [{cacertfile,"{{ ssl.get('ca_file', '/etc/rabbitmq/ssl/cacert.pem') }}"},
                             {certfile,"{{ ssl.get('cert_file', '/etc/rabbitmq/ssl/cert.pem') }}"},
                             {keyfile,"{{ ssl.get('key_file', '/etc/rabbitmq/ssl/key.pem') }}"},
                             {verify,verify_{{ server.ssl.get('verify', 'peer') }},
                             {fail_if_no_peer_cert,false}]
              }
              {% endif %}
             ]
    }
].
{#-
vim: syntax=jinja
#}
