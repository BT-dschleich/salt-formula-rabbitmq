log_collector:
  decoder:
    rabbitmq_log:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/rabbitmq.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
  input:
    rabbitmq_log:
      engine: logstreamer
      log_directory: "/var/log/rabbitmq"
      file_match: 'rabbit@(?P<Node>.+)\.log$'
      differentiator: ["rabbitmq.", "Node"]
      decoder: "rabbitmq_log_decoder"
      splitter: "rabbitmq_log_splitter"
  splitter:
    rabbitmq_log:
      engine: regex
      delimiter: '\n\n(=[^=]+====)'
      delimiter_eol: false
metric_collector:
  filter:
    rabbitmq_service_status:
      engine: sandbox
      module_file: /usr/share/lma_collector/filters/afd.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      preserve_data: false
      message_matcher: "(Type == 'metric' || Type == 'heka.sandbox.metric') && (Fields[name] == 'rabbitmq_check')"
      ticker_interval: 10
      config:
        afd_type: 'service'
        afd_file: 'lma_alarms_rabbitmq_service_check'
        afd_cluster_name: 'rabbitmq-service'
        afd_logical_name: 'check'
        activate_alerting: true
        enable_notification: false
    rabbitmq_cluster_disk:
      engine: sandbox
      module_file: /usr/share/lma_collector/filters/afd.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      preserve_data: false
      message_matcher: "(Type == 'metric' || Type == 'heka.sandbox.metric') && (Fields[name] == 'rabbitmq_remaining_disk')"
      ticker_interval: 10
      config:
        afd_type: 'service'
        afd_file: 'lma_alarms_rabbitmq_cluster_disk'
        afd_cluster_name: 'rabbitmq-cluster'
        afd_logical_name: 'disk'
        activate_alerting: true
        enable_notification: false
